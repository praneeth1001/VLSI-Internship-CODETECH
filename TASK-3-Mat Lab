function pipelined_processor_simulation()
    % Define parameters
    NUM_REGS = 8;         % Number of registers
    MEMORY_SIZE = 16;     % Memory size
    NUM_STAGES = 4;       % Pipeline stages
    instructions = [      % Instruction set: [opcode, dest, src1, src2/mem]
        3, 1, 0, 4;       % LOAD R1, MEM[4]
        3, 2, 0, 5;       % LOAD R2, MEM[5]
        1, 3, 1, 2;       % ADD R3, R1, R2
        2, 4, 3, 1        % SUB R4, R3, R1
    ];

    % Initialize components
    registers = zeros(1, NUM_REGS);     % Register file
    memory = randi([1, 100], 1, MEMORY_SIZE); % Memory with random values
    pipeline = repmat(struct('instruction', [], 'data', []), NUM_STAGES, 1);
    completed_instructions = 0;
    num_instructions = size(instructions, 1);
    cycle = 0;

    % Simulation loop
    fprintf('Cycle\tStage 1\t\tStage 2\t\tStage 3\t\tStage 4\n');
    while completed_instructions < num_instructions
        % Advance the pipeline
        for stage = NUM_STAGES:-1:2
            pipeline(stage) = pipeline(stage - 1);
        end
        pipeline(1).instruction = []; % Clear Fetch stage for new instruction

        % Fetch Stage
        if cycle < num_instructions
            pipeline(1).instruction = instructions(cycle + 1, :);
        end

        % Decode Stage
        if ~isempty(pipeline(2).instruction)
            instr = pipeline(2).instruction;
            opcode = instr(1);
            src1 = instr(3);
            src2 = instr(4);
            if opcode == 3  % LOAD
                pipeline(2).data = memory(src2); % Load from memory
            else
                pipeline(2).data = [registers(src1), registers(src2)];
            end
        end

        % Execute Stage
        if ~isempty(pipeline(3).instruction)
            instr = pipeline(3).instruction;
            opcode = instr(1);
            if opcode == 1  % ADD
                pipeline(3).data = sum(pipeline(3).data);
            elseif opcode == 2  % SUB
                pipeline(3).data = diff(pipeline(3).data);
            end
        end

        % Write Back Stage
        if ~isempty(pipeline(4).instruction)
            instr = pipeline(4).instruction;
            opcode = instr(1);
            dest = instr(2);
            if opcode == 1 || opcode == 2  % ADD or SUB
                registers(dest) = pipeline(4).data;
            elseif opcode == 3  % LOAD
                registers(dest) = pipeline(4).data;
            end
            completed_instructions = completed_instructions + 1;
        end

        % Display Pipeline Status
        fprintf('%d\t', cycle);
        for stage = 1:NUM_STAGES
            if isempty(pipeline(stage).instruction)
                fprintf('[Empty]\t\t');
            else
                fprintf('[%d]\t\t', pipeline(stage).instruction(1));
            end
        end
        fprintf('\n');

        % Increment cycle
        cycle = cycle + 1;
    end

    % Final Results
    fprintf('\nFinal Register Values:\n');
    disp(registers);
    fprintf('Memory Contents:\n');
    disp(memory);
end
